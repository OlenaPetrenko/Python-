from math import sqrt

users = {"Angelica": {"Blues Traveler": 3.5, "Broken Bells": 2.0, "Norah Jones": 4.5, "Phoenix": 5.0, "Slightly Stoopid": 1.5, "The Strokes": 2.5, "Vampire Weekend": 2.0},
         "Bill":{"Blues Traveler": 2.0, "Broken Bells": 3.5, "Deadmau5": 4.0, "Phoenix": 2.0, "Slightly Stoopid": 3.5, "Vampire Weekend": 3.0},
         "Chan": {"Blues Traveler": 5.0, "Broken Bells": 1.0, "Deadmau5": 1.0, "Norah Jones": 3.0, "Phoenix": 5, "Slightly Stoopid": 1.0},
         "Dan": {"Blues Traveler": 3.0, "Broken Bells": 4.0, "Deadmau5": 4.5, "Phoenix": 3.0, "Slightly Stoopid": 4.5, "The Strokes": 4.0, "Vampire Weekend": 2.0},
         "Hailey": {"Broken Bells": 4.0, "Deadmau5": 1.0, "Norah Jones": 4.0, "The Strokes": 4.0, "Vampire Weekend": 1.0},
         "Jordyn":  {"Broken Bells": 4.5, "Deadmau5": 4.0, "Norah Jones": 5.0, "Phoenix": 5.0, "Slightly Stoopid": 4.5, "The Strokes": 4.0, "Vampire Weekend": 4.0},
         "Sam": {"Blues Traveler": 5.0, "Broken Bells": 2.0, "Norah Jones": 3.0, "Phoenix": 5.0, "Slightly Stoopid": 4.0, "The Strokes": 5.0},
         "Veronica": {"Blues Traveler": 3.0, "Norah Jones": 5.0, "Phoenix": 4.0, "Slightly Stoopid": 2.5, "The Strokes": 3.0}
        }

# get rating of a particular user
users ['Veronica']
{'Blues Traveler': 3.0, 'Norah Jones': 5.0, 'Phoenix': 4.0, 'Slightly Stoopid': 2.5, 'The Strokes': 3.0}

# compute Manhattan distance
def manhattan (rating1, rating2):
   """computes the Manhattan distance. Both rating1 and rating2 are dictionaries of the form {'The Strokes': 3.0)"""
   distance = 0
   for key in rating1:
      if key in rating2:
         distance += abs (rating1 [key] - rating2[key])
   return distance
   
# test the function
manhattan (users ['Sam'], users ['Veronica'])
8.5

# function to find the closest person
def computeNearestNeighbor (username, users):
    """creates a sorted list of users based on their distance to username"""
   distance = []
   for user in users:
       if user != username:
          distance = manhattan (users [user], users [username])
          distance.append ((distance, user))
   """sort based on distance -- closest first
   distances.sort ()
   return distances

# test the function 
computeNearestNeighbor ('Hailey', users)
[(2.0, 'Veronica'), (4.0, 'Chan'), (4.0, 'Sam'), (4.5, 'Dan'), (5.0, 'Angelica'), (5.5, 'Bill'), (7.5, 'Jordyn')]
 
# make the recommendation
def recommend (username, users):
    """ give the list of recommendations"""
    # first find the nearest neighbor 
    nearest = computeNearestNeighbor (username, users)[0][1]
    recommendations = []
    # now find bands neighbor rated that user didn't
    neighborRatings = users [nearest]
    userRatings = users [username]
    for artist in neighborRatings:
        if not artist in userRatings:
           recommendations.append ((artist, neighborRatings [artist]))
    # using the fn sorted for variety - sort is more efficient
    return sorted (recommendations, 
                   key = lambda artistTuple: artistTuple [1],
                   reverse = True)
                  
# test the recommendation 
recommend ('Hailey', users)
[('Phoenix', 4.0), ('Blues Traveler', 3.0), ('Slightly Stoopid', 2.5)]


# Minkowski distance function
def minkowski (rating1, rating2, r):
   """ Computes the Minkowski distance. Both rating1 and rating2 are dictionaries of the form {'The Strokes':3.0, 'Slightly Stupid':2.5}"""
   distance = 0
   commonRatings = False
   for key in rating1:
       if key in rating2:
          distance += pow (abs(rating1[key] - rating2[key]), r)
          commonRatings = True
   if commonRatings:
      return pow (distance, 1/r)
   else:
      return 0 # indicates no ratings in common
      
      
 # test the function
distance = minkowski (users ['Bill'], users['Veronica'], 2)# the 2 argument implements Euclidean distance
distance
2.449489742783178
   
# Pearson correlation coefficient
def pearson (rating1, rating2):
    sum_xy = 0
    sum_x = 0
    sum_y = 0
    sum_x2 = 0
    sum_y2 = 0
    n = 0
    for key in rating1:
        if key in rating2:
              n += 1
              x = rating1[key]
              y = rating2[key]
              sum_xy += x*y
              sum_x += x
              sum_y += y
              sum_x2 += x**2
              sum_y2 += y**2
     # now compute the denominator
     denominator = sqrt (sum_x2 - (sum_x**2) / n) * sqrt (sum_y2 - (sum_y**2) / n)
     if denominator == 0:
           return 0
     else:
           return (sum_xy - (sum_x * sum_y) / n) / denominator
           
# test the function
pearson (users ['Veronica'], users ['Bill'])
-0.7559289460184542
